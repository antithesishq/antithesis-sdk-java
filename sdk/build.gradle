plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {
    api 'com.fasterxml.jackson.core:jackson-databind:2.2.3'

    if (file("libs/antithesis-ffi-${project.version}.jar").isFile()) {
        implementation(files("libs/antithesis-ffi-${project.version}.jar"))
    } else {
        implementation(project(":ffi"))
    }

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.2.3'

    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    testCompileOnly 'org.projectlombok:lombok:1.18.34'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.compilerArgs += ["-Xlint:-options"]
}

jar {
    archiveClassifier = ''
    archiveBaseName = 'antithesis'
    archiveAppendix = 'sdk'
    manifest {
        attributes 'Implementation-Title': 'Antithesis SDK for Java',
                'Implementation-Version': "${project.version}",
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    }
}

task copyDependencies(type: Copy) {
    doLast {}
    from configurations.runtimeClasspath
    into 'build/dependencies'
}
build.dependsOn copyDependencies

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    exclude 'com/antithesis/sdk/internal/**'

    // Hack to enable Javadoc to compile while exclude internal functions
    var sourceSetDirectories = sourceSets.main.java.srcDirs.join(":")
    options.addStringOption("sourcepath", sourceSetDirectories)

    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
}
build.dependsOn generateJavadoc

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}
test.dependsOn jar

tasks.named('test') {
    useJUnitPlatform()
}
